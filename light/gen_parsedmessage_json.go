// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package light

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

// MarshalJSON marshals as JSON.
func (p TransactionData) MarshalJSON() ([]byte, error) {
	type TransactionData struct {
		Receipt *types.Receipt  `json:"receipt" 	gencodec:"required"`
		Input   []byte          `json:"calldata"`
		Value   *big.Int        `json:"value"`
		Address *common.Address `json:"contract"`
		Code    []byte          `json:"contract_code"`
	}
	var enc TransactionData
	enc.Input = p.Input
	enc.Value = p.Value
	enc.Address = p.Address
	enc.Code = p.Code
	enc.Receipt = p.Receipt
	return json.Marshal(&enc)
}

// MarshalJSON marshals as JSON.
func (p ParsedMessage) MarshalJSON() ([]byte, error) {
	type ParsedMessage struct {
		Transactions TransactionDatas `json:"transactions" 	gencodec:"required"`
		Header       *types.Header    `json:"header" 	gencodec:"required"`
	}
	var enc ParsedMessage
	enc.Transactions = p.Transactions
	enc.Header = p.Block.Header()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (p *ParsedMessage) UnmarshalJSON(input []byte) error {
	type ParsedMessage struct {
	}
	var dec ParsedMessage
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	return nil
}
